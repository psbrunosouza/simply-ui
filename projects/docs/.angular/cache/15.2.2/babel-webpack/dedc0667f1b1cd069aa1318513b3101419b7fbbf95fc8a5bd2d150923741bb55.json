{"ast":null,"code":"'use strict';\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return typeof key === \"symbol\" ? key : String(key);\n}\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nrequire(\"/home/bruno/repos/libs/lib-y/node_modules/core-js/modules/es.object.define-property.js\");\nrequire(\"/home/bruno/repos/libs/lib-y/node_modules/core-js/modules/es.regexp.constructor.js\");\nrequire(\"/home/bruno/repos/libs/lib-y/node_modules/core-js/modules/es.regexp.exec.js\");\nrequire(\"/home/bruno/repos/libs/lib-y/node_modules/core-js/modules/es.regexp.to-string.js\");\nrequire(\"/home/bruno/repos/libs/lib-y/node_modules/core-js/modules/es.set.js\");\nrequire(\"/home/bruno/repos/libs/lib-y/node_modules/core-js/modules/es.object.to-string.js\");\nrequire(\"/home/bruno/repos/libs/lib-y/node_modules/core-js/modules/es.string.iterator.js\");\nrequire(\"/home/bruno/repos/libs/lib-y/node_modules/core-js/modules/es.array.iterator.js\");\nrequire(\"/home/bruno/repos/libs/lib-y/node_modules/core-js/modules/web.dom-collections.iterator.js\");\nrequire(\"/home/bruno/repos/libs/lib-y/node_modules/core-js/modules/es.array.slice.js\");\nrequire(\"/home/bruno/repos/libs/lib-y/node_modules/core-js/modules/es.array.is-array.js\");\nrequire(\"/home/bruno/repos/libs/lib-y/node_modules/core-js/modules/es.weak-map.js\");\nrequire(\"/home/bruno/repos/libs/lib-y/node_modules/core-js/modules/es.object.get-own-property-names.js\");\nrequire(\"/home/bruno/repos/libs/lib-y/node_modules/core-js/modules/es.object.get-own-property-descriptor.js\");\nrequire(\"/home/bruno/repos/libs/lib-y/node_modules/core-js/modules/es.object.get-prototype-of.js\");\nrequire(\"/home/bruno/repos/libs/lib-y/node_modules/core-js/modules/es.array.from.js\");\nrequire(\"/home/bruno/repos/libs/lib-y/node_modules/core-js/modules/es.array.for-each.js\");\nrequire(\"/home/bruno/repos/libs/lib-y/node_modules/core-js/modules/web.dom-collections.for-each.js\");\nrequire(\"/home/bruno/repos/libs/lib-y/node_modules/core-js/modules/es.promise.js\");\nrequire(\"/home/bruno/repos/libs/lib-y/node_modules/core-js/modules/es.function.name.js\");\nrequire(\"/home/bruno/repos/libs/lib-y/node_modules/core-js/modules/es.string.starts-with.js\");\nrequire(\"/home/bruno/repos/libs/lib-y/node_modules/core-js/modules/es.string.replace.js\");\nrequire(\"/home/bruno/repos/libs/lib-y/node_modules/core-js/modules/es.map.js\");\nrequire(\"/home/bruno/repos/libs/lib-y/node_modules/core-js/modules/es.string.match.js\");\nrequire(\"/home/bruno/repos/libs/lib-y/node_modules/core-js/modules/es.function.bind.js\");\nrequire(\"/home/bruno/repos/libs/lib-y/node_modules/core-js/modules/es.symbol.to-primitive.js\");\nrequire(\"/home/bruno/repos/libs/lib-y/node_modules/core-js/modules/es.date.to-primitive.js\");\nrequire(\"/home/bruno/repos/libs/lib-y/node_modules/core-js/modules/es.symbol.js\");\nrequire(\"/home/bruno/repos/libs/lib-y/node_modules/core-js/modules/es.symbol.description.js\");\nrequire(\"/home/bruno/repos/libs/lib-y/node_modules/core-js/modules/es.number.constructor.js\");\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.spyOn = exports.mocked = exports.fn = exports.ModuleMocker = void 0;\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* eslint-disable local/ban-types-eventually, local/prefer-rest-params-eventually */\n\n/**\n * Possible types of a MockFunctionResult.\n * 'return': The call completed by returning normally.\n * 'throw': The call completed by throwing a value.\n * 'incomplete': The call has not completed yet. This is possible if you read\n *               the  mock function result from within the mock function itself\n *               (or a function called by the mock function).\n */\n\n/**\n * Represents the result of a single call to a mock function.\n */\n// see https://github.com/Microsoft/TypeScript/issues/25215\nvar MOCK_CONSTRUCTOR_NAME = 'mockConstructor';\nvar FUNCTION_NAME_RESERVED_PATTERN = /[\\s!-\\/:-@\\[-`{-~]/;\nvar FUNCTION_NAME_RESERVED_REPLACE = new RegExp(FUNCTION_NAME_RESERVED_PATTERN.source, 'g');\nvar RESERVED_KEYWORDS = new Set(['arguments', 'await', 'break', 'case', 'catch', 'class', 'const', 'continue', 'debugger', 'default', 'delete', 'do', 'else', 'enum', 'eval', 'export', 'extends', 'false', 'finally', 'for', 'function', 'if', 'implements', 'import', 'in', 'instanceof', 'interface', 'let', 'new', 'null', 'package', 'private', 'protected', 'public', 'return', 'static', 'super', 'switch', 'this', 'throw', 'true', 'try', 'typeof', 'var', 'void', 'while', 'with', 'yield']);\nfunction matchArity(fn, length) {\n  var mockConstructor;\n  switch (length) {\n    case 1:\n      mockConstructor = function (_a) {\n        return fn.apply(this, arguments);\n      };\n      break;\n    case 2:\n      mockConstructor = function (_a, _b) {\n        return fn.apply(this, arguments);\n      };\n      break;\n    case 3:\n      mockConstructor = function (_a, _b, _c) {\n        return fn.apply(this, arguments);\n      };\n      break;\n    case 4:\n      mockConstructor = function (_a, _b, _c, _d) {\n        return fn.apply(this, arguments);\n      };\n      break;\n    case 5:\n      mockConstructor = function (_a, _b, _c, _d, _e) {\n        return fn.apply(this, arguments);\n      };\n      break;\n    case 6:\n      mockConstructor = function (_a, _b, _c, _d, _e, _f) {\n        return fn.apply(this, arguments);\n      };\n      break;\n    case 7:\n      mockConstructor = function (_a, _b, _c, _d, _e, _f, _g) {\n        return fn.apply(this, arguments);\n      };\n      break;\n    case 8:\n      mockConstructor = function (_a, _b, _c, _d, _e, _f, _g, _h) {\n        return fn.apply(this, arguments);\n      };\n      break;\n    case 9:\n      mockConstructor = function (_a, _b, _c, _d, _e, _f, _g, _h, _i) {\n        return fn.apply(this, arguments);\n      };\n      break;\n    default:\n      mockConstructor = function () {\n        return fn.apply(this, arguments);\n      };\n      break;\n  }\n  return mockConstructor;\n}\nfunction getObjectType(value) {\n  return Object.prototype.toString.apply(value).slice(8, -1);\n}\nfunction getType(ref) {\n  var typeName = getObjectType(ref);\n  if (typeName === 'Function' || typeName === 'AsyncFunction' || typeName === 'GeneratorFunction') {\n    return 'function';\n  } else if (Array.isArray(ref)) {\n    return 'array';\n  } else if (typeName === 'Object') {\n    return 'object';\n  } else if (typeName === 'Number' || typeName === 'String' || typeName === 'Boolean' || typeName === 'Symbol') {\n    return 'constant';\n  } else if (typeName === 'Map' || typeName === 'WeakMap' || typeName === 'Set') {\n    return 'collection';\n  } else if (typeName === 'RegExp') {\n    return 'regexp';\n  } else if (ref === undefined) {\n    return 'undefined';\n  } else if (ref === null) {\n    return 'null';\n  } else {\n    return null;\n  }\n}\nfunction isReadonlyProp(object, prop) {\n  if (prop === 'arguments' || prop === 'caller' || prop === 'callee' || prop === 'name' || prop === 'length') {\n    var typeName = getObjectType(object);\n    return typeName === 'Function' || typeName === 'AsyncFunction' || typeName === 'GeneratorFunction';\n  }\n  if (prop === 'source' || prop === 'global' || prop === 'ignoreCase' || prop === 'multiline') {\n    return getObjectType(object) === 'RegExp';\n  }\n  return false;\n}\nvar ModuleMocker = /*#__PURE__*/function () {\n  /**\n   * @see README.md\n   * @param global Global object of the test environment, used to create\n   * mocks\n   */\n  function ModuleMocker(global) {\n    _classCallCheck(this, ModuleMocker);\n    _defineProperty(this, '_environmentGlobal', void 0);\n    _defineProperty(this, '_mockState', void 0);\n    _defineProperty(this, '_mockConfigRegistry', void 0);\n    _defineProperty(this, '_spyState', void 0);\n    _defineProperty(this, '_invocationCallCounter', void 0);\n    this._environmentGlobal = global;\n    this._mockState = new WeakMap();\n    this._mockConfigRegistry = new WeakMap();\n    this._spyState = new Set();\n    this._invocationCallCounter = 1;\n  }\n  _createClass(ModuleMocker, [{\n    key: \"_getSlots\",\n    value: function _getSlots(object) {\n      if (!object) {\n        return [];\n      }\n      var slots = new Set();\n      var EnvObjectProto = this._environmentGlobal.Object.prototype;\n      var EnvFunctionProto = this._environmentGlobal.Function.prototype;\n      var EnvRegExpProto = this._environmentGlobal.RegExp.prototype; // Also check the builtins in the current context as they leak through\n      // core node modules.\n\n      var ObjectProto = Object.prototype;\n      var FunctionProto = Function.prototype;\n      var RegExpProto = RegExp.prototype; // Properties of Object.prototype, Function.prototype and RegExp.prototype\n      // are never reported as slots\n\n      while (object != null && object !== EnvObjectProto && object !== EnvFunctionProto && object !== EnvRegExpProto && object !== ObjectProto && object !== FunctionProto && object !== RegExpProto) {\n        var ownNames = Object.getOwnPropertyNames(object);\n        for (var i = 0; i < ownNames.length; i++) {\n          var prop = ownNames[i];\n          if (!isReadonlyProp(object, prop)) {\n            var propDesc = Object.getOwnPropertyDescriptor(object, prop);\n            if (propDesc !== undefined && !propDesc.get || object.__esModule) {\n              slots.add(prop);\n            }\n          }\n        }\n        object = Object.getPrototypeOf(object);\n      }\n      return Array.from(slots);\n    }\n  }, {\n    key: \"_ensureMockConfig\",\n    value: function _ensureMockConfig(f) {\n      var config = this._mockConfigRegistry.get(f);\n      if (!config) {\n        config = this._defaultMockConfig();\n        this._mockConfigRegistry.set(f, config);\n      }\n      return config;\n    }\n  }, {\n    key: \"_ensureMockState\",\n    value: function _ensureMockState(f) {\n      var state = this._mockState.get(f);\n      if (!state) {\n        state = this._defaultMockState();\n        this._mockState.set(f, state);\n      }\n      if (state.calls.length > 0) {\n        state.lastCall = state.calls[state.calls.length - 1];\n      }\n      return state;\n    }\n  }, {\n    key: \"_defaultMockConfig\",\n    value: function _defaultMockConfig() {\n      return {\n        mockImpl: undefined,\n        mockName: 'jest.fn()',\n        specificMockImpls: [],\n        specificReturnValues: []\n      };\n    }\n  }, {\n    key: \"_defaultMockState\",\n    value: function _defaultMockState() {\n      return {\n        calls: [],\n        instances: [],\n        invocationCallOrder: [],\n        results: []\n      };\n    }\n  }, {\n    key: \"_makeComponent\",\n    value: function _makeComponent(metadata, restore) {\n      var _this2 = this;\n      if (metadata.type === 'object') {\n        return new this._environmentGlobal.Object();\n      } else if (metadata.type === 'array') {\n        return new this._environmentGlobal.Array();\n      } else if (metadata.type === 'regexp') {\n        return new this._environmentGlobal.RegExp('');\n      } else if (metadata.type === 'constant' || metadata.type === 'collection' || metadata.type === 'null' || metadata.type === 'undefined') {\n        return metadata.value;\n      } else if (metadata.type === 'function') {\n        var prototype = metadata.members && metadata.members.prototype && metadata.members.prototype.members || {};\n        var prototypeSlots = this._getSlots(prototype);\n        var mocker = this;\n        var mockConstructor = matchArity(function () {\n          var _arguments = arguments,\n            _this = this;\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n          var mockState = mocker._ensureMockState(f);\n          var mockConfig = mocker._ensureMockConfig(f);\n          mockState.instances.push(this);\n          mockState.calls.push(args); // Create and record an \"incomplete\" mock result immediately upon\n          // calling rather than waiting for the mock to return. This avoids\n          // issues caused by recursion where results can be recorded in the\n          // wrong order.\n\n          var mockResult = {\n            type: 'incomplete',\n            value: undefined\n          };\n          mockState.results.push(mockResult);\n          mockState.invocationCallOrder.push(mocker._invocationCallCounter++); // Will be set to the return value of the mock if an error is not thrown\n\n          var finalReturnValue; // Will be set to the error that is thrown by the mock (if it throws)\n\n          var thrownError; // Will be set to true if the mock throws an error. The presence of a\n          // value in `thrownError` is not a 100% reliable indicator because a\n          // function could throw a value of undefined.\n\n          var callDidThrowError = false;\n          try {\n            // The bulk of the implementation is wrapped in an immediately\n            // executed arrow function so the return value of the mock function\n            // can be easily captured and recorded, despite the many separate\n            // return points within the logic.\n            finalReturnValue = function () {\n              if (_this instanceof f) {\n                // This is probably being called as a constructor\n                prototypeSlots.forEach(function (slot) {\n                  // Copy prototype methods to the instance to make\n                  // it easier to interact with mock instance call and\n                  // return values\n                  if (prototype[slot].type === 'function') {\n                    // @ts-expect-error no index signature\n                    var protoImpl = _this[slot]; // @ts-expect-error no index signature\n\n                    _this[slot] = mocker.generateFromMetadata(prototype[slot]); // @ts-expect-error no index signature\n\n                    _this[slot]._protoImpl = protoImpl;\n                  }\n                }); // Run the mock constructor implementation\n\n                var mockImpl = mockConfig.specificMockImpls.length ? mockConfig.specificMockImpls.shift() : mockConfig.mockImpl;\n                return mockImpl && mockImpl.apply(_this, _arguments);\n              } // If mockImplementationOnce()/mockImplementation() is last set,\n              // implementation use the mock\n\n              var specificMockImpl = mockConfig.specificMockImpls.shift();\n              if (specificMockImpl === undefined) {\n                specificMockImpl = mockConfig.mockImpl;\n              }\n              if (specificMockImpl) {\n                return specificMockImpl.apply(_this, _arguments);\n              } // Otherwise use prototype implementation\n\n              if (f._protoImpl) {\n                return f._protoImpl.apply(_this, _arguments);\n              }\n              return undefined;\n            }();\n          } catch (error) {\n            // Store the thrown error so we can record it, then re-throw it.\n            thrownError = error;\n            callDidThrowError = true;\n            throw error;\n          } finally {\n            // Record the result of the function.\n            // NOTE: Intentionally NOT pushing/indexing into the array of mock\n            //       results here to avoid corrupting results data if mockClear()\n            //       is called during the execution of the mock.\n            mockResult.type = callDidThrowError ? 'throw' : 'return';\n            mockResult.value = callDidThrowError ? thrownError : finalReturnValue;\n          }\n          return finalReturnValue;\n        }, metadata.length || 0);\n        var f = this._createMockFunction(metadata, mockConstructor);\n        f._isMockFunction = true;\n        f.getMockImplementation = function () {\n          return _this2._ensureMockConfig(f).mockImpl;\n        };\n        if (typeof restore === 'function') {\n          this._spyState.add(restore);\n        }\n        this._mockState.set(f, this._defaultMockState());\n        this._mockConfigRegistry.set(f, this._defaultMockConfig());\n        Object.defineProperty(f, 'mock', {\n          configurable: false,\n          enumerable: true,\n          get: function () {\n            return _this2._ensureMockState(f);\n          },\n          set: function (val) {\n            return _this2._mockState.set(f, val);\n          }\n        });\n        f.mockClear = function () {\n          _this2._mockState.delete(f);\n          return f;\n        };\n        f.mockReset = function () {\n          f.mockClear();\n          _this2._mockConfigRegistry.delete(f);\n          return f;\n        };\n        f.mockRestore = function () {\n          f.mockReset();\n          return restore ? restore() : undefined;\n        };\n        f.mockReturnValueOnce = function (value // next function call will return this value or default return value\n        ) {\n          return f.mockImplementationOnce(function () {\n            return value;\n          });\n        };\n        f.mockResolvedValueOnce = function (value) {\n          return f.mockImplementationOnce(function () {\n            return Promise.resolve(value);\n          });\n        };\n        f.mockRejectedValueOnce = function (value) {\n          return f.mockImplementationOnce(function () {\n            return Promise.reject(value);\n          });\n        };\n        f.mockReturnValue = function (value // next function call will return specified return value or this one\n        ) {\n          return f.mockImplementation(function () {\n            return value;\n          });\n        };\n        f.mockResolvedValue = function (value) {\n          return f.mockImplementation(function () {\n            return Promise.resolve(value);\n          });\n        };\n        f.mockRejectedValue = function (value) {\n          return f.mockImplementation(function () {\n            return Promise.reject(value);\n          });\n        };\n        f.mockImplementationOnce = function (fn) {\n          // next function call will use this mock implementation return value\n          // or default mock implementation return value\n          var mockConfig = _this2._ensureMockConfig(f);\n          mockConfig.specificMockImpls.push(fn);\n          return f;\n        };\n        f.mockImplementation = function (fn) {\n          // next function call will use mock implementation return value\n          var mockConfig = _this2._ensureMockConfig(f);\n          mockConfig.mockImpl = fn;\n          return f;\n        };\n        f.mockReturnThis = function () {\n          return f.mockImplementation(function () {\n            return this;\n          });\n        };\n        f.mockName = function (name) {\n          if (name) {\n            var mockConfig = _this2._ensureMockConfig(f);\n            mockConfig.mockName = name;\n          }\n          return f;\n        };\n        f.getMockName = function () {\n          var mockConfig = _this2._ensureMockConfig(f);\n          return mockConfig.mockName || 'jest.fn()';\n        };\n        if (metadata.mockImpl) {\n          f.mockImplementation(metadata.mockImpl);\n        }\n        return f;\n      } else {\n        var unknownType = metadata.type || 'undefined type';\n        throw new Error('Unrecognized type ' + unknownType);\n      }\n    }\n  }, {\n    key: \"_createMockFunction\",\n    value: function _createMockFunction(metadata, mockConstructor) {\n      var name = metadata.name;\n      if (!name) {\n        return mockConstructor;\n      } // Preserve `name` property of mocked function.\n\n      var boundFunctionPrefix = 'bound ';\n      var bindCall = ''; // if-do-while for perf reasons. The common case is for the if to fail.\n\n      if (name && name.startsWith(boundFunctionPrefix)) {\n        do {\n          name = name.substring(boundFunctionPrefix.length); // Call bind() just to alter the function name.\n\n          bindCall = '.bind(null)';\n        } while (name && name.startsWith(boundFunctionPrefix));\n      } // Special case functions named `mockConstructor` to guard for infinite\n      // loops.\n\n      if (name === MOCK_CONSTRUCTOR_NAME) {\n        return mockConstructor;\n      }\n      if (\n      // It's a syntax error to define functions with a reserved keyword\n      // as name.\n      RESERVED_KEYWORDS.has(name) ||\n      // It's also a syntax error to define functions with a name that starts with a number\n      /^\\d/.test(name)) {\n        name = '$' + name;\n      } // It's also a syntax error to define a function with a reserved character\n      // as part of it's name.\n\n      if (FUNCTION_NAME_RESERVED_PATTERN.test(name)) {\n        name = name.replace(FUNCTION_NAME_RESERVED_REPLACE, '$');\n      }\n      var body = 'return function ' + name + '() {' + 'return ' + MOCK_CONSTRUCTOR_NAME + '.apply(this,arguments);' + '}' + bindCall;\n      var createConstructor = new this._environmentGlobal.Function(MOCK_CONSTRUCTOR_NAME, body);\n      return createConstructor(mockConstructor);\n    }\n  }, {\n    key: \"_generateMock\",\n    value: function _generateMock(metadata, callbacks, refs) {\n      var _this3 = this;\n      // metadata not compatible but it's the same type, maybe problem with\n      // overloading of _makeComponent and not _generateMock?\n      // @ts-expect-error\n      var mock = this._makeComponent(metadata);\n      if (metadata.refID != null) {\n        refs[metadata.refID] = mock;\n      }\n      this._getSlots(metadata.members).forEach(function (slot) {\n        var slotMetadata = metadata.members && metadata.members[slot] || {};\n        if (slotMetadata.ref != null) {\n          callbacks.push(function (ref) {\n            return function () {\n              return mock[slot] = refs[ref];\n            };\n          }(slotMetadata.ref));\n        } else {\n          mock[slot] = _this3._generateMock(slotMetadata, callbacks, refs);\n        }\n      });\n      if (metadata.type !== 'undefined' && metadata.type !== 'null' && mock.prototype && typeof mock.prototype === 'object') {\n        mock.prototype.constructor = mock;\n      }\n      return mock;\n    }\n    /**\n     * @see README.md\n     * @param _metadata Metadata for the mock in the schema returned by the\n     * getMetadata method of this module.\n     */\n  }, {\n    key: \"generateFromMetadata\",\n    value: function generateFromMetadata(_metadata) {\n      var callbacks = [];\n      var refs = {};\n      var mock = this._generateMock(_metadata, callbacks, refs);\n      callbacks.forEach(function (setter) {\n        return setter();\n      });\n      return mock;\n    }\n    /**\n     * @see README.md\n     * @param component The component for which to retrieve metadata.\n     */\n  }, {\n    key: \"getMetadata\",\n    value: function getMetadata(component, _refs) {\n      var _this4 = this;\n      var refs = _refs || new Map();\n      var ref = refs.get(component);\n      if (ref != null) {\n        return {\n          ref: ref\n        };\n      }\n      var type = getType(component);\n      if (!type) {\n        return null;\n      }\n      var metadata = {\n        type: type\n      };\n      if (type === 'constant' || type === 'collection' || type === 'undefined' || type === 'null') {\n        metadata.value = component;\n        return metadata;\n      } else if (type === 'function') {\n        // @ts-expect-error this is a function so it has a name\n        metadata.name = component.name; // @ts-expect-error may be a mock\n\n        if (component._isMockFunction === true) {\n          // @ts-expect-error may be a mock\n          metadata.mockImpl = component.getMockImplementation();\n        }\n      }\n      metadata.refID = refs.size;\n      refs.set(component, metadata.refID);\n      var members = null; // Leave arrays alone\n\n      if (type !== 'array') {\n        this._getSlots(component).forEach(function (slot) {\n          if (type === 'function' &&\n          // @ts-expect-error may be a mock\n          component._isMockFunction === true && slot.match(/^mock/)) {\n            return;\n          } // @ts-expect-error no index signature\n\n          var slotMetadata = _this4.getMetadata(component[slot], refs);\n          if (slotMetadata) {\n            if (!members) {\n              members = {};\n            }\n            members[slot] = slotMetadata;\n          }\n        });\n      }\n      if (members) {\n        metadata.members = members;\n      }\n      return metadata;\n    }\n  }, {\n    key: \"isMockFunction\",\n    value: function isMockFunction(fn) {\n      return !!fn && fn._isMockFunction === true;\n    }\n  }, {\n    key: \"fn\",\n    value: function fn(implementation) {\n      var length = implementation ? implementation.length : 0;\n      var fn = this._makeComponent({\n        length: length,\n        type: 'function'\n      });\n      if (implementation) {\n        fn.mockImplementation(implementation);\n      }\n      return fn;\n    }\n\n    // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  }, {\n    key: \"spyOn\",\n    value: function spyOn(object, methodName, accessType) {\n      if (accessType) {\n        return this._spyOnProperty(object, methodName, accessType);\n      }\n      if (typeof object !== 'object' && typeof object !== 'function') {\n        throw new Error('Cannot spyOn on a primitive value; ' + this._typeOf(object) + ' given');\n      }\n      var original = object[methodName];\n      if (!this.isMockFunction(original)) {\n        if (typeof original !== 'function') {\n          throw new Error('Cannot spy the ' + methodName + ' property because it is not a function; ' + this._typeOf(original) + ' given instead');\n        }\n        var isMethodOwner = Object.prototype.hasOwnProperty.call(object, methodName);\n        var descriptor = Object.getOwnPropertyDescriptor(object, methodName);\n        var proto = Object.getPrototypeOf(object);\n        while (!descriptor && proto !== null) {\n          descriptor = Object.getOwnPropertyDescriptor(proto, methodName);\n          proto = Object.getPrototypeOf(proto);\n        }\n        var mock;\n        if (descriptor && descriptor.get) {\n          var originalGet = descriptor.get;\n          mock = this._makeComponent({\n            type: 'function'\n          }, function () {\n            descriptor.get = originalGet;\n            Object.defineProperty(object, methodName, descriptor);\n          });\n          descriptor.get = function () {\n            return mock;\n          };\n          Object.defineProperty(object, methodName, descriptor);\n        } else {\n          mock = this._makeComponent({\n            type: 'function'\n          }, function () {\n            if (isMethodOwner) {\n              object[methodName] = original;\n            } else {\n              delete object[methodName];\n            }\n          }); // @ts-expect-error overriding original method with a Mock\n\n          object[methodName] = mock;\n        }\n        mock.mockImplementation(function () {\n          return original.apply(this, arguments);\n        });\n      }\n      return object[methodName];\n    }\n  }, {\n    key: \"_spyOnProperty\",\n    value: function _spyOnProperty(obj, propertyName) {\n      var accessType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'get';\n      if (typeof obj !== 'object' && typeof obj !== 'function') {\n        throw new Error('Cannot spyOn on a primitive value; ' + this._typeOf(obj) + ' given');\n      }\n      if (!obj) {\n        throw new Error('spyOn could not find an object to spy upon for ' + propertyName + '');\n      }\n      if (!propertyName) {\n        throw new Error('No property name supplied');\n      }\n      var descriptor = Object.getOwnPropertyDescriptor(obj, propertyName);\n      var proto = Object.getPrototypeOf(obj);\n      while (!descriptor && proto !== null) {\n        descriptor = Object.getOwnPropertyDescriptor(proto, propertyName);\n        proto = Object.getPrototypeOf(proto);\n      }\n      if (!descriptor) {\n        throw new Error(propertyName + ' property does not exist');\n      }\n      if (!descriptor.configurable) {\n        throw new Error(propertyName + ' is not declared configurable');\n      }\n      if (!descriptor[accessType]) {\n        throw new Error('Property ' + propertyName + ' does not have access type ' + accessType);\n      }\n      var original = descriptor[accessType];\n      if (!this.isMockFunction(original)) {\n        if (typeof original !== 'function') {\n          throw new Error('Cannot spy the ' + propertyName + ' property because it is not a function; ' + this._typeOf(original) + ' given instead');\n        } // @ts-expect-error: mock is assignable\n\n        descriptor[accessType] = this._makeComponent({\n          type: 'function'\n        }, function () {\n          // @ts-expect-error: mock is assignable\n          descriptor[accessType] = original;\n          Object.defineProperty(obj, propertyName, descriptor);\n        });\n        descriptor[accessType].mockImplementation(function () {\n          // @ts-expect-error\n          return original.apply(this, arguments);\n        });\n      }\n      Object.defineProperty(obj, propertyName, descriptor);\n      return descriptor[accessType];\n    }\n  }, {\n    key: \"clearAllMocks\",\n    value: function clearAllMocks() {\n      this._mockState = new WeakMap();\n    }\n  }, {\n    key: \"resetAllMocks\",\n    value: function resetAllMocks() {\n      this._mockConfigRegistry = new WeakMap();\n      this._mockState = new WeakMap();\n    }\n  }, {\n    key: \"restoreAllMocks\",\n    value: function restoreAllMocks() {\n      this._spyState.forEach(function (restore) {\n        return restore();\n      });\n      this._spyState = new Set();\n    }\n  }, {\n    key: \"_typeOf\",\n    value: function _typeOf(value) {\n      return value == null ? '' + value : typeof value;\n    } // the typings test helper\n  }, {\n    key: \"mocked\",\n    value: function mocked(item) {\n      var _deep = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      return item;\n    }\n  }]);\n  return ModuleMocker;\n}();\nexports.ModuleMocker = ModuleMocker;\nvar JestMock = new ModuleMocker(global);\nvar fn = JestMock.fn.bind(JestMock);\nexports.fn = fn;\nvar spyOn = JestMock.spyOn.bind(JestMock);\nexports.spyOn = spyOn;\nvar mocked = JestMock.mocked.bind(JestMock);\nexports.mocked = mocked;","map":{"version":3,"mappings":"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","names":["descriptor","Object","writable","require","defineProperty","exports","value","spyOn","mocked","fn","ModuleMocker","_defineProperty","obj","key","enumerable","configurable","MOCK_CONSTRUCTOR_NAME","FUNCTION_NAME_RESERVED_PATTERN","FUNCTION_NAME_RESERVED_REPLACE","RegExp","source","RESERVED_KEYWORDS","Set","matchArity","length","mockConstructor","_a","apply","arguments","_b","_c","_d","_e","_f","_g","_h","_i","getObjectType","prototype","toString","slice","getType","ref","typeName","Array","isArray","undefined","isReadonlyProp","object","prop","global","_classCallCheck","_environmentGlobal","_mockState","WeakMap","_mockConfigRegistry","_spyState","_invocationCallCounter","_createClass","slots","EnvObjectProto","EnvFunctionProto","Function","EnvRegExpProto","ObjectProto","FunctionProto","RegExpProto","ownNames","getOwnPropertyNames","i","propDesc","getOwnPropertyDescriptor","get","__esModule","add","getPrototypeOf","from","f","config","_defaultMockConfig","set","state","_defaultMockState","calls","lastCall","mockImpl","mockName","specificMockImpls","specificReturnValues","instances","invocationCallOrder","results","metadata","restore","type","members","prototypeSlots","_getSlots","mocker","_this","args","mockState","_ensureMockState","mockConfig","_ensureMockConfig","push","mockResult","finalReturnValue","thrownError","callDidThrowError","forEach","slot","protoImpl","generateFromMetadata","_protoImpl","shift","specificMockImpl","error","_createMockFunction","_isMockFunction","getMockImplementation","_this2","val","mockClear","delete","mockReset","mockRestore","mockReturnValueOnce","mockImplementationOnce","mockResolvedValueOnce","Promise","resolve","mockRejectedValueOnce","reject","mockReturnValue","mockImplementation","mockResolvedValue","mockRejectedValue","mockReturnThis","name","getMockName","unknownType","Error","boundFunctionPrefix","bindCall","startsWith","substring","has","test","replace","body","createConstructor","callbacks","refs","mock","_makeComponent","refID","slotMetadata","_this3","_generateMock","constructor","_metadata","setter","component","_refs","Map","size","match","_this4","getMetadata","implementation","methodName","accessType","_spyOnProperty","_typeOf","original","isMockFunction","isMethodOwner","hasOwnProperty","call","proto","originalGet","propertyName","item","_deep","JestMock","bind"],"sources":["/home/bruno/repos/libs/lib-y/node_modules/jest-mock/build/index.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nexports.spyOn = exports.mocked = exports.fn = exports.ModuleMocker = void 0;\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n/**\n * Copyright (c) Facebook, Inc. and its affiliates. All Rights Reserved.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n/* eslint-disable local/ban-types-eventually, local/prefer-rest-params-eventually */\n\n/**\n * Possible types of a MockFunctionResult.\n * 'return': The call completed by returning normally.\n * 'throw': The call completed by throwing a value.\n * 'incomplete': The call has not completed yet. This is possible if you read\n *               the  mock function result from within the mock function itself\n *               (or a function called by the mock function).\n */\n\n/**\n * Represents the result of a single call to a mock function.\n */\n// see https://github.com/Microsoft/TypeScript/issues/25215\nconst MOCK_CONSTRUCTOR_NAME = 'mockConstructor';\nconst FUNCTION_NAME_RESERVED_PATTERN = /[\\s!-\\/:-@\\[-`{-~]/;\nconst FUNCTION_NAME_RESERVED_REPLACE = new RegExp(\n  FUNCTION_NAME_RESERVED_PATTERN.source,\n  'g'\n);\nconst RESERVED_KEYWORDS = new Set([\n  'arguments',\n  'await',\n  'break',\n  'case',\n  'catch',\n  'class',\n  'const',\n  'continue',\n  'debugger',\n  'default',\n  'delete',\n  'do',\n  'else',\n  'enum',\n  'eval',\n  'export',\n  'extends',\n  'false',\n  'finally',\n  'for',\n  'function',\n  'if',\n  'implements',\n  'import',\n  'in',\n  'instanceof',\n  'interface',\n  'let',\n  'new',\n  'null',\n  'package',\n  'private',\n  'protected',\n  'public',\n  'return',\n  'static',\n  'super',\n  'switch',\n  'this',\n  'throw',\n  'true',\n  'try',\n  'typeof',\n  'var',\n  'void',\n  'while',\n  'with',\n  'yield'\n]);\n\nfunction matchArity(fn, length) {\n  let mockConstructor;\n\n  switch (length) {\n    case 1:\n      mockConstructor = function (_a) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 2:\n      mockConstructor = function (_a, _b) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 3:\n      mockConstructor = function (_a, _b, _c) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 4:\n      mockConstructor = function (_a, _b, _c, _d) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 5:\n      mockConstructor = function (_a, _b, _c, _d, _e) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 6:\n      mockConstructor = function (_a, _b, _c, _d, _e, _f) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 7:\n      mockConstructor = function (_a, _b, _c, _d, _e, _f, _g) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 8:\n      mockConstructor = function (_a, _b, _c, _d, _e, _f, _g, _h) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    case 9:\n      mockConstructor = function (_a, _b, _c, _d, _e, _f, _g, _h, _i) {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n\n    default:\n      mockConstructor = function () {\n        return fn.apply(this, arguments);\n      };\n\n      break;\n  }\n\n  return mockConstructor;\n}\n\nfunction getObjectType(value) {\n  return Object.prototype.toString.apply(value).slice(8, -1);\n}\n\nfunction getType(ref) {\n  const typeName = getObjectType(ref);\n\n  if (\n    typeName === 'Function' ||\n    typeName === 'AsyncFunction' ||\n    typeName === 'GeneratorFunction'\n  ) {\n    return 'function';\n  } else if (Array.isArray(ref)) {\n    return 'array';\n  } else if (typeName === 'Object') {\n    return 'object';\n  } else if (\n    typeName === 'Number' ||\n    typeName === 'String' ||\n    typeName === 'Boolean' ||\n    typeName === 'Symbol'\n  ) {\n    return 'constant';\n  } else if (\n    typeName === 'Map' ||\n    typeName === 'WeakMap' ||\n    typeName === 'Set'\n  ) {\n    return 'collection';\n  } else if (typeName === 'RegExp') {\n    return 'regexp';\n  } else if (ref === undefined) {\n    return 'undefined';\n  } else if (ref === null) {\n    return 'null';\n  } else {\n    return null;\n  }\n}\n\nfunction isReadonlyProp(object, prop) {\n  if (\n    prop === 'arguments' ||\n    prop === 'caller' ||\n    prop === 'callee' ||\n    prop === 'name' ||\n    prop === 'length'\n  ) {\n    const typeName = getObjectType(object);\n    return (\n      typeName === 'Function' ||\n      typeName === 'AsyncFunction' ||\n      typeName === 'GeneratorFunction'\n    );\n  }\n\n  if (\n    prop === 'source' ||\n    prop === 'global' ||\n    prop === 'ignoreCase' ||\n    prop === 'multiline'\n  ) {\n    return getObjectType(object) === 'RegExp';\n  }\n\n  return false;\n}\n\nclass ModuleMocker {\n  /**\n   * @see README.md\n   * @param global Global object of the test environment, used to create\n   * mocks\n   */\n  constructor(global) {\n    _defineProperty(this, '_environmentGlobal', void 0);\n\n    _defineProperty(this, '_mockState', void 0);\n\n    _defineProperty(this, '_mockConfigRegistry', void 0);\n\n    _defineProperty(this, '_spyState', void 0);\n\n    _defineProperty(this, '_invocationCallCounter', void 0);\n\n    this._environmentGlobal = global;\n    this._mockState = new WeakMap();\n    this._mockConfigRegistry = new WeakMap();\n    this._spyState = new Set();\n    this._invocationCallCounter = 1;\n  }\n\n  _getSlots(object) {\n    if (!object) {\n      return [];\n    }\n\n    const slots = new Set();\n    const EnvObjectProto = this._environmentGlobal.Object.prototype;\n    const EnvFunctionProto = this._environmentGlobal.Function.prototype;\n    const EnvRegExpProto = this._environmentGlobal.RegExp.prototype; // Also check the builtins in the current context as they leak through\n    // core node modules.\n\n    const ObjectProto = Object.prototype;\n    const FunctionProto = Function.prototype;\n    const RegExpProto = RegExp.prototype; // Properties of Object.prototype, Function.prototype and RegExp.prototype\n    // are never reported as slots\n\n    while (\n      object != null &&\n      object !== EnvObjectProto &&\n      object !== EnvFunctionProto &&\n      object !== EnvRegExpProto &&\n      object !== ObjectProto &&\n      object !== FunctionProto &&\n      object !== RegExpProto\n    ) {\n      const ownNames = Object.getOwnPropertyNames(object);\n\n      for (let i = 0; i < ownNames.length; i++) {\n        const prop = ownNames[i];\n\n        if (!isReadonlyProp(object, prop)) {\n          const propDesc = Object.getOwnPropertyDescriptor(object, prop);\n\n          if ((propDesc !== undefined && !propDesc.get) || object.__esModule) {\n            slots.add(prop);\n          }\n        }\n      }\n\n      object = Object.getPrototypeOf(object);\n    }\n\n    return Array.from(slots);\n  }\n\n  _ensureMockConfig(f) {\n    let config = this._mockConfigRegistry.get(f);\n\n    if (!config) {\n      config = this._defaultMockConfig();\n\n      this._mockConfigRegistry.set(f, config);\n    }\n\n    return config;\n  }\n\n  _ensureMockState(f) {\n    let state = this._mockState.get(f);\n\n    if (!state) {\n      state = this._defaultMockState();\n\n      this._mockState.set(f, state);\n    }\n\n    if (state.calls.length > 0) {\n      state.lastCall = state.calls[state.calls.length - 1];\n    }\n\n    return state;\n  }\n\n  _defaultMockConfig() {\n    return {\n      mockImpl: undefined,\n      mockName: 'jest.fn()',\n      specificMockImpls: [],\n      specificReturnValues: []\n    };\n  }\n\n  _defaultMockState() {\n    return {\n      calls: [],\n      instances: [],\n      invocationCallOrder: [],\n      results: []\n    };\n  }\n\n  _makeComponent(metadata, restore) {\n    if (metadata.type === 'object') {\n      return new this._environmentGlobal.Object();\n    } else if (metadata.type === 'array') {\n      return new this._environmentGlobal.Array();\n    } else if (metadata.type === 'regexp') {\n      return new this._environmentGlobal.RegExp('');\n    } else if (\n      metadata.type === 'constant' ||\n      metadata.type === 'collection' ||\n      metadata.type === 'null' ||\n      metadata.type === 'undefined'\n    ) {\n      return metadata.value;\n    } else if (metadata.type === 'function') {\n      const prototype =\n        (metadata.members &&\n          metadata.members.prototype &&\n          metadata.members.prototype.members) ||\n        {};\n\n      const prototypeSlots = this._getSlots(prototype);\n\n      const mocker = this;\n      const mockConstructor = matchArity(function (...args) {\n        const mockState = mocker._ensureMockState(f);\n\n        const mockConfig = mocker._ensureMockConfig(f);\n\n        mockState.instances.push(this);\n        mockState.calls.push(args); // Create and record an \"incomplete\" mock result immediately upon\n        // calling rather than waiting for the mock to return. This avoids\n        // issues caused by recursion where results can be recorded in the\n        // wrong order.\n\n        const mockResult = {\n          type: 'incomplete',\n          value: undefined\n        };\n        mockState.results.push(mockResult);\n        mockState.invocationCallOrder.push(mocker._invocationCallCounter++); // Will be set to the return value of the mock if an error is not thrown\n\n        let finalReturnValue; // Will be set to the error that is thrown by the mock (if it throws)\n\n        let thrownError; // Will be set to true if the mock throws an error. The presence of a\n        // value in `thrownError` is not a 100% reliable indicator because a\n        // function could throw a value of undefined.\n\n        let callDidThrowError = false;\n\n        try {\n          // The bulk of the implementation is wrapped in an immediately\n          // executed arrow function so the return value of the mock function\n          // can be easily captured and recorded, despite the many separate\n          // return points within the logic.\n          finalReturnValue = (() => {\n            if (this instanceof f) {\n              // This is probably being called as a constructor\n              prototypeSlots.forEach(slot => {\n                // Copy prototype methods to the instance to make\n                // it easier to interact with mock instance call and\n                // return values\n                if (prototype[slot].type === 'function') {\n                  // @ts-expect-error no index signature\n                  const protoImpl = this[slot]; // @ts-expect-error no index signature\n\n                  this[slot] = mocker.generateFromMetadata(prototype[slot]); // @ts-expect-error no index signature\n\n                  this[slot]._protoImpl = protoImpl;\n                }\n              }); // Run the mock constructor implementation\n\n              const mockImpl = mockConfig.specificMockImpls.length\n                ? mockConfig.specificMockImpls.shift()\n                : mockConfig.mockImpl;\n              return mockImpl && mockImpl.apply(this, arguments);\n            } // If mockImplementationOnce()/mockImplementation() is last set,\n            // implementation use the mock\n\n            let specificMockImpl = mockConfig.specificMockImpls.shift();\n\n            if (specificMockImpl === undefined) {\n              specificMockImpl = mockConfig.mockImpl;\n            }\n\n            if (specificMockImpl) {\n              return specificMockImpl.apply(this, arguments);\n            } // Otherwise use prototype implementation\n\n            if (f._protoImpl) {\n              return f._protoImpl.apply(this, arguments);\n            }\n\n            return undefined;\n          })();\n        } catch (error) {\n          // Store the thrown error so we can record it, then re-throw it.\n          thrownError = error;\n          callDidThrowError = true;\n          throw error;\n        } finally {\n          // Record the result of the function.\n          // NOTE: Intentionally NOT pushing/indexing into the array of mock\n          //       results here to avoid corrupting results data if mockClear()\n          //       is called during the execution of the mock.\n          mockResult.type = callDidThrowError ? 'throw' : 'return';\n          mockResult.value = callDidThrowError ? thrownError : finalReturnValue;\n        }\n\n        return finalReturnValue;\n      }, metadata.length || 0);\n\n      const f = this._createMockFunction(metadata, mockConstructor);\n\n      f._isMockFunction = true;\n\n      f.getMockImplementation = () => this._ensureMockConfig(f).mockImpl;\n\n      if (typeof restore === 'function') {\n        this._spyState.add(restore);\n      }\n\n      this._mockState.set(f, this._defaultMockState());\n\n      this._mockConfigRegistry.set(f, this._defaultMockConfig());\n\n      Object.defineProperty(f, 'mock', {\n        configurable: false,\n        enumerable: true,\n        get: () => this._ensureMockState(f),\n        set: val => this._mockState.set(f, val)\n      });\n\n      f.mockClear = () => {\n        this._mockState.delete(f);\n\n        return f;\n      };\n\n      f.mockReset = () => {\n        f.mockClear();\n\n        this._mockConfigRegistry.delete(f);\n\n        return f;\n      };\n\n      f.mockRestore = () => {\n        f.mockReset();\n        return restore ? restore() : undefined;\n      };\n\n      f.mockReturnValueOnce = (\n        value // next function call will return this value or default return value\n      ) => f.mockImplementationOnce(() => value);\n\n      f.mockResolvedValueOnce = value =>\n        f.mockImplementationOnce(() => Promise.resolve(value));\n\n      f.mockRejectedValueOnce = value =>\n        f.mockImplementationOnce(() => Promise.reject(value));\n\n      f.mockReturnValue = (\n        value // next function call will return specified return value or this one\n      ) => f.mockImplementation(() => value);\n\n      f.mockResolvedValue = value =>\n        f.mockImplementation(() => Promise.resolve(value));\n\n      f.mockRejectedValue = value =>\n        f.mockImplementation(() => Promise.reject(value));\n\n      f.mockImplementationOnce = fn => {\n        // next function call will use this mock implementation return value\n        // or default mock implementation return value\n        const mockConfig = this._ensureMockConfig(f);\n\n        mockConfig.specificMockImpls.push(fn);\n        return f;\n      };\n\n      f.mockImplementation = fn => {\n        // next function call will use mock implementation return value\n        const mockConfig = this._ensureMockConfig(f);\n\n        mockConfig.mockImpl = fn;\n        return f;\n      };\n\n      f.mockReturnThis = () =>\n        f.mockImplementation(function () {\n          return this;\n        });\n\n      f.mockName = name => {\n        if (name) {\n          const mockConfig = this._ensureMockConfig(f);\n\n          mockConfig.mockName = name;\n        }\n\n        return f;\n      };\n\n      f.getMockName = () => {\n        const mockConfig = this._ensureMockConfig(f);\n\n        return mockConfig.mockName || 'jest.fn()';\n      };\n\n      if (metadata.mockImpl) {\n        f.mockImplementation(metadata.mockImpl);\n      }\n\n      return f;\n    } else {\n      const unknownType = metadata.type || 'undefined type';\n      throw new Error('Unrecognized type ' + unknownType);\n    }\n  }\n\n  _createMockFunction(metadata, mockConstructor) {\n    let name = metadata.name;\n\n    if (!name) {\n      return mockConstructor;\n    } // Preserve `name` property of mocked function.\n\n    const boundFunctionPrefix = 'bound ';\n    let bindCall = ''; // if-do-while for perf reasons. The common case is for the if to fail.\n\n    if (name && name.startsWith(boundFunctionPrefix)) {\n      do {\n        name = name.substring(boundFunctionPrefix.length); // Call bind() just to alter the function name.\n\n        bindCall = '.bind(null)';\n      } while (name && name.startsWith(boundFunctionPrefix));\n    } // Special case functions named `mockConstructor` to guard for infinite\n    // loops.\n\n    if (name === MOCK_CONSTRUCTOR_NAME) {\n      return mockConstructor;\n    }\n\n    if (\n      // It's a syntax error to define functions with a reserved keyword\n      // as name.\n      RESERVED_KEYWORDS.has(name) || // It's also a syntax error to define functions with a name that starts with a number\n      /^\\d/.test(name)\n    ) {\n      name = '$' + name;\n    } // It's also a syntax error to define a function with a reserved character\n    // as part of it's name.\n\n    if (FUNCTION_NAME_RESERVED_PATTERN.test(name)) {\n      name = name.replace(FUNCTION_NAME_RESERVED_REPLACE, '$');\n    }\n\n    const body =\n      'return function ' +\n      name +\n      '() {' +\n      'return ' +\n      MOCK_CONSTRUCTOR_NAME +\n      '.apply(this,arguments);' +\n      '}' +\n      bindCall;\n    const createConstructor = new this._environmentGlobal.Function(\n      MOCK_CONSTRUCTOR_NAME,\n      body\n    );\n    return createConstructor(mockConstructor);\n  }\n\n  _generateMock(metadata, callbacks, refs) {\n    // metadata not compatible but it's the same type, maybe problem with\n    // overloading of _makeComponent and not _generateMock?\n    // @ts-expect-error\n    const mock = this._makeComponent(metadata);\n\n    if (metadata.refID != null) {\n      refs[metadata.refID] = mock;\n    }\n\n    this._getSlots(metadata.members).forEach(slot => {\n      const slotMetadata = (metadata.members && metadata.members[slot]) || {};\n\n      if (slotMetadata.ref != null) {\n        callbacks.push(\n          (function (ref) {\n            return () => (mock[slot] = refs[ref]);\n          })(slotMetadata.ref)\n        );\n      } else {\n        mock[slot] = this._generateMock(slotMetadata, callbacks, refs);\n      }\n    });\n\n    if (\n      metadata.type !== 'undefined' &&\n      metadata.type !== 'null' &&\n      mock.prototype &&\n      typeof mock.prototype === 'object'\n    ) {\n      mock.prototype.constructor = mock;\n    }\n\n    return mock;\n  }\n  /**\n   * @see README.md\n   * @param _metadata Metadata for the mock in the schema returned by the\n   * getMetadata method of this module.\n   */\n\n  generateFromMetadata(_metadata) {\n    const callbacks = [];\n    const refs = {};\n\n    const mock = this._generateMock(_metadata, callbacks, refs);\n\n    callbacks.forEach(setter => setter());\n    return mock;\n  }\n  /**\n   * @see README.md\n   * @param component The component for which to retrieve metadata.\n   */\n\n  getMetadata(component, _refs) {\n    const refs = _refs || new Map();\n    const ref = refs.get(component);\n\n    if (ref != null) {\n      return {\n        ref\n      };\n    }\n\n    const type = getType(component);\n\n    if (!type) {\n      return null;\n    }\n\n    const metadata = {\n      type\n    };\n\n    if (\n      type === 'constant' ||\n      type === 'collection' ||\n      type === 'undefined' ||\n      type === 'null'\n    ) {\n      metadata.value = component;\n      return metadata;\n    } else if (type === 'function') {\n      // @ts-expect-error this is a function so it has a name\n      metadata.name = component.name; // @ts-expect-error may be a mock\n\n      if (component._isMockFunction === true) {\n        // @ts-expect-error may be a mock\n        metadata.mockImpl = component.getMockImplementation();\n      }\n    }\n\n    metadata.refID = refs.size;\n    refs.set(component, metadata.refID);\n    let members = null; // Leave arrays alone\n\n    if (type !== 'array') {\n      this._getSlots(component).forEach(slot => {\n        if (\n          type === 'function' && // @ts-expect-error may be a mock\n          component._isMockFunction === true &&\n          slot.match(/^mock/)\n        ) {\n          return;\n        } // @ts-expect-error no index signature\n\n        const slotMetadata = this.getMetadata(component[slot], refs);\n\n        if (slotMetadata) {\n          if (!members) {\n            members = {};\n          }\n\n          members[slot] = slotMetadata;\n        }\n      });\n    }\n\n    if (members) {\n      metadata.members = members;\n    }\n\n    return metadata;\n  }\n\n  isMockFunction(fn) {\n    return !!fn && fn._isMockFunction === true;\n  }\n\n  fn(implementation) {\n    const length = implementation ? implementation.length : 0;\n\n    const fn = this._makeComponent({\n      length,\n      type: 'function'\n    });\n\n    if (implementation) {\n      fn.mockImplementation(implementation);\n    }\n\n    return fn;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n  spyOn(object, methodName, accessType) {\n    if (accessType) {\n      return this._spyOnProperty(object, methodName, accessType);\n    }\n\n    if (typeof object !== 'object' && typeof object !== 'function') {\n      throw new Error(\n        'Cannot spyOn on a primitive value; ' + this._typeOf(object) + ' given'\n      );\n    }\n\n    const original = object[methodName];\n\n    if (!this.isMockFunction(original)) {\n      if (typeof original !== 'function') {\n        throw new Error(\n          'Cannot spy the ' +\n            methodName +\n            ' property because it is not a function; ' +\n            this._typeOf(original) +\n            ' given instead'\n        );\n      }\n\n      const isMethodOwner = Object.prototype.hasOwnProperty.call(\n        object,\n        methodName\n      );\n      let descriptor = Object.getOwnPropertyDescriptor(object, methodName);\n      let proto = Object.getPrototypeOf(object);\n\n      while (!descriptor && proto !== null) {\n        descriptor = Object.getOwnPropertyDescriptor(proto, methodName);\n        proto = Object.getPrototypeOf(proto);\n      }\n\n      let mock;\n\n      if (descriptor && descriptor.get) {\n        const originalGet = descriptor.get;\n        mock = this._makeComponent(\n          {\n            type: 'function'\n          },\n          () => {\n            descriptor.get = originalGet;\n            Object.defineProperty(object, methodName, descriptor);\n          }\n        );\n\n        descriptor.get = () => mock;\n\n        Object.defineProperty(object, methodName, descriptor);\n      } else {\n        mock = this._makeComponent(\n          {\n            type: 'function'\n          },\n          () => {\n            if (isMethodOwner) {\n              object[methodName] = original;\n            } else {\n              delete object[methodName];\n            }\n          }\n        ); // @ts-expect-error overriding original method with a Mock\n\n        object[methodName] = mock;\n      }\n\n      mock.mockImplementation(function () {\n        return original.apply(this, arguments);\n      });\n    }\n\n    return object[methodName];\n  }\n\n  _spyOnProperty(obj, propertyName, accessType = 'get') {\n    if (typeof obj !== 'object' && typeof obj !== 'function') {\n      throw new Error(\n        'Cannot spyOn on a primitive value; ' + this._typeOf(obj) + ' given'\n      );\n    }\n\n    if (!obj) {\n      throw new Error(\n        'spyOn could not find an object to spy upon for ' + propertyName + ''\n      );\n    }\n\n    if (!propertyName) {\n      throw new Error('No property name supplied');\n    }\n\n    let descriptor = Object.getOwnPropertyDescriptor(obj, propertyName);\n    let proto = Object.getPrototypeOf(obj);\n\n    while (!descriptor && proto !== null) {\n      descriptor = Object.getOwnPropertyDescriptor(proto, propertyName);\n      proto = Object.getPrototypeOf(proto);\n    }\n\n    if (!descriptor) {\n      throw new Error(propertyName + ' property does not exist');\n    }\n\n    if (!descriptor.configurable) {\n      throw new Error(propertyName + ' is not declared configurable');\n    }\n\n    if (!descriptor[accessType]) {\n      throw new Error(\n        'Property ' + propertyName + ' does not have access type ' + accessType\n      );\n    }\n\n    const original = descriptor[accessType];\n\n    if (!this.isMockFunction(original)) {\n      if (typeof original !== 'function') {\n        throw new Error(\n          'Cannot spy the ' +\n            propertyName +\n            ' property because it is not a function; ' +\n            this._typeOf(original) +\n            ' given instead'\n        );\n      } // @ts-expect-error: mock is assignable\n\n      descriptor[accessType] = this._makeComponent(\n        {\n          type: 'function'\n        },\n        () => {\n          // @ts-expect-error: mock is assignable\n          descriptor[accessType] = original;\n          Object.defineProperty(obj, propertyName, descriptor);\n        }\n      );\n      descriptor[accessType].mockImplementation(function () {\n        // @ts-expect-error\n        return original.apply(this, arguments);\n      });\n    }\n\n    Object.defineProperty(obj, propertyName, descriptor);\n    return descriptor[accessType];\n  }\n\n  clearAllMocks() {\n    this._mockState = new WeakMap();\n  }\n\n  resetAllMocks() {\n    this._mockConfigRegistry = new WeakMap();\n    this._mockState = new WeakMap();\n  }\n\n  restoreAllMocks() {\n    this._spyState.forEach(restore => restore());\n\n    this._spyState = new Set();\n  }\n\n  _typeOf(value) {\n    return value == null ? '' + value : typeof value;\n  } // the typings test helper\n\n  mocked(item, _deep = false) {\n    return item;\n  }\n}\n\nexports.ModuleMocker = ModuleMocker;\nconst JestMock = new ModuleMocker(global);\nconst fn = JestMock.fn.bind(JestMock);\nexports.fn = fn;\nconst spyOn = JestMock.spyOn.bind(JestMock);\nexports.spyOn = spyOn;\nconst mocked = JestMock.mocked.bind(JestMock);\nexports.mocked = mocked;\n"]},"metadata":{},"sourceType":"script","externalDependencies":[]}