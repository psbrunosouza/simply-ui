{"ast":null,"code":"'use strict';\n\nvar inspect = require('object-inspect');\nvar GetIntrinsic = require('get-intrinsic');\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar Call = require('./Call');\nvar Get = require('./Get');\nvar GetIterator = require('./GetIterator');\nvar IsCallable = require('./IsCallable');\nvar IteratorClose = require('./IteratorClose');\nvar IteratorStep = require('./IteratorStep');\nvar IteratorValue = require('./IteratorValue');\nvar Type = require('./Type');\n\n// https://262.ecma-international.org/10.0//#sec-add-entries-from-iterable\n\nmodule.exports = function AddEntriesFromIterable(target, iterable, adder) {\n  if (!IsCallable(adder)) {\n    throw new $TypeError('Assertion failed: `adder` is not callable');\n  }\n  if (iterable == null) {\n    throw new $TypeError('Assertion failed: `iterable` is present, and not nullish');\n  }\n  var iteratorRecord = GetIterator(iterable);\n  while (true) {\n    // eslint-disable-line no-constant-condition\n    var next = IteratorStep(iteratorRecord);\n    if (!next) {\n      return target;\n    }\n    var nextItem = IteratorValue(next);\n    if (Type(nextItem) !== 'Object') {\n      var error = new $TypeError('iterator next must return an Object, got ' + inspect(nextItem));\n      return IteratorClose(iteratorRecord, function () {\n        throw error;\n      } // eslint-disable-line no-loop-func\n      );\n    }\n\n    try {\n      var k = Get(nextItem, '0');\n      var v = Get(nextItem, '1');\n      Call(adder, target, [k, v]);\n    } catch (e) {\n      return IteratorClose(iteratorRecord, function () {\n        throw e;\n      });\n    }\n  }\n};","map":{"version":3,"names":["inspect","require","GetIntrinsic","$TypeError","Call","Get","GetIterator","IsCallable","IteratorClose","IteratorStep","IteratorValue","Type","module","exports","AddEntriesFromIterable","target","iterable","adder","iteratorRecord","next","nextItem","error","k","v","e"],"sources":["/home/bruno/repos/libs/lib-y/node_modules/es-abstract/2022/AddEntriesFromIterable.js"],"sourcesContent":["'use strict';\n\nvar inspect = require('object-inspect');\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar Call = require('./Call');\nvar Get = require('./Get');\nvar GetIterator = require('./GetIterator');\nvar IsCallable = require('./IsCallable');\nvar IteratorClose = require('./IteratorClose');\nvar IteratorStep = require('./IteratorStep');\nvar IteratorValue = require('./IteratorValue');\nvar Type = require('./Type');\n\n// https://262.ecma-international.org/10.0//#sec-add-entries-from-iterable\n\nmodule.exports = function AddEntriesFromIterable(target, iterable, adder) {\n\tif (!IsCallable(adder)) {\n\t\tthrow new $TypeError('Assertion failed: `adder` is not callable');\n\t}\n\tif (iterable == null) {\n\t\tthrow new $TypeError('Assertion failed: `iterable` is present, and not nullish');\n\t}\n\tvar iteratorRecord = GetIterator(iterable);\n\twhile (true) { // eslint-disable-line no-constant-condition\n\t\tvar next = IteratorStep(iteratorRecord);\n\t\tif (!next) {\n\t\t\treturn target;\n\t\t}\n\t\tvar nextItem = IteratorValue(next);\n\t\tif (Type(nextItem) !== 'Object') {\n\t\t\tvar error = new $TypeError('iterator next must return an Object, got ' + inspect(nextItem));\n\t\t\treturn IteratorClose(\n\t\t\t\titeratorRecord,\n\t\t\t\tfunction () { throw error; } // eslint-disable-line no-loop-func\n\t\t\t);\n\t\t}\n\t\ttry {\n\t\t\tvar k = Get(nextItem, '0');\n\t\t\tvar v = Get(nextItem, '1');\n\t\t\tCall(adder, target, [k, v]);\n\t\t} catch (e) {\n\t\t\treturn IteratorClose(\n\t\t\t\titeratorRecord,\n\t\t\t\tfunction () { throw e; }\n\t\t\t);\n\t\t}\n\t}\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,OAAO,GAAGC,OAAO,CAAC,gBAAgB,CAAC;AAEvC,IAAIC,YAAY,GAAGD,OAAO,CAAC,eAAe,CAAC;AAE3C,IAAIE,UAAU,GAAGD,YAAY,CAAC,aAAa,CAAC;AAE5C,IAAIE,IAAI,GAAGH,OAAO,CAAC,QAAQ,CAAC;AAC5B,IAAII,GAAG,GAAGJ,OAAO,CAAC,OAAO,CAAC;AAC1B,IAAIK,WAAW,GAAGL,OAAO,CAAC,eAAe,CAAC;AAC1C,IAAIM,UAAU,GAAGN,OAAO,CAAC,cAAc,CAAC;AACxC,IAAIO,aAAa,GAAGP,OAAO,CAAC,iBAAiB,CAAC;AAC9C,IAAIQ,YAAY,GAAGR,OAAO,CAAC,gBAAgB,CAAC;AAC5C,IAAIS,aAAa,GAAGT,OAAO,CAAC,iBAAiB,CAAC;AAC9C,IAAIU,IAAI,GAAGV,OAAO,CAAC,QAAQ,CAAC;;AAE5B;;AAEAW,MAAM,CAACC,OAAO,GAAG,SAASC,sBAAsB,CAACC,MAAM,EAAEC,QAAQ,EAAEC,KAAK,EAAE;EACzE,IAAI,CAACV,UAAU,CAACU,KAAK,CAAC,EAAE;IACvB,MAAM,IAAId,UAAU,CAAC,2CAA2C,CAAC;EAClE;EACA,IAAIa,QAAQ,IAAI,IAAI,EAAE;IACrB,MAAM,IAAIb,UAAU,CAAC,0DAA0D,CAAC;EACjF;EACA,IAAIe,cAAc,GAAGZ,WAAW,CAACU,QAAQ,CAAC;EAC1C,OAAO,IAAI,EAAE;IAAE;IACd,IAAIG,IAAI,GAAGV,YAAY,CAACS,cAAc,CAAC;IACvC,IAAI,CAACC,IAAI,EAAE;MACV,OAAOJ,MAAM;IACd;IACA,IAAIK,QAAQ,GAAGV,aAAa,CAACS,IAAI,CAAC;IAClC,IAAIR,IAAI,CAACS,QAAQ,CAAC,KAAK,QAAQ,EAAE;MAChC,IAAIC,KAAK,GAAG,IAAIlB,UAAU,CAAC,2CAA2C,GAAGH,OAAO,CAACoB,QAAQ,CAAC,CAAC;MAC3F,OAAOZ,aAAa,CACnBU,cAAc,EACd,YAAY;QAAE,MAAMG,KAAK;MAAE,CAAC,CAAC;MAAA,CAC7B;IACF;;IACA,IAAI;MACH,IAAIC,CAAC,GAAGjB,GAAG,CAACe,QAAQ,EAAE,GAAG,CAAC;MAC1B,IAAIG,CAAC,GAAGlB,GAAG,CAACe,QAAQ,EAAE,GAAG,CAAC;MAC1BhB,IAAI,CAACa,KAAK,EAAEF,MAAM,EAAE,CAACO,CAAC,EAAEC,CAAC,CAAC,CAAC;IAC5B,CAAC,CAAC,OAAOC,CAAC,EAAE;MACX,OAAOhB,aAAa,CACnBU,cAAc,EACd,YAAY;QAAE,MAAMM,CAAC;MAAE,CAAC,CACxB;IACF;EACD;AACD,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}