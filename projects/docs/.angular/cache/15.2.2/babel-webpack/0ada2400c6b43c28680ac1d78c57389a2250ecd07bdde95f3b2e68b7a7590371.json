{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar $TypeError = GetIntrinsic('%TypeError%');\nvar Call = require('./Call');\nvar CompletionRecord = require('./CompletionRecord');\nvar GetMethod = require('./GetMethod');\nvar IsCallable = require('./IsCallable');\nvar Type = require('./Type');\n\n// https://ecma-international.org/ecma-262/6.0/#sec-iteratorclose\n\nmodule.exports = function IteratorClose(iterator, completion) {\n  if (Type(iterator) !== 'Object') {\n    throw new $TypeError('Assertion failed: Type(iterator) is not Object');\n  }\n  if (!IsCallable(completion) && !(completion instanceof CompletionRecord)) {\n    throw new $TypeError('Assertion failed: completion is not a thunk representing a Completion Record, nor a Completion Record instance');\n  }\n  var completionThunk = completion instanceof CompletionRecord ? function () {\n    return completion['?']();\n  } : completion;\n  var iteratorReturn = GetMethod(iterator, 'return');\n  if (typeof iteratorReturn === 'undefined') {\n    return completionThunk();\n  }\n  var completionRecord;\n  try {\n    var innerResult = Call(iteratorReturn, iterator, []);\n  } catch (e) {\n    // if we hit here, then \"e\" is the innerResult completion that needs re-throwing\n\n    // if the completion is of type \"throw\", this will throw.\n    completionThunk();\n    completionThunk = null; // ensure it's not called twice.\n\n    // if not, then return the innerResult completion\n    throw e;\n  }\n  completionRecord = completionThunk(); // if innerResult worked, then throw if the completion does\n  completionThunk = null; // ensure it's not called twice.\n\n  if (Type(innerResult) !== 'Object') {\n    throw new $TypeError('iterator .return must return an object');\n  }\n  return completionRecord;\n};","map":{"version":3,"names":["GetIntrinsic","require","$TypeError","Call","CompletionRecord","GetMethod","IsCallable","Type","module","exports","IteratorClose","iterator","completion","completionThunk","iteratorReturn","completionRecord","innerResult","e"],"sources":["/home/bruno/repos/libs/lib-y/node_modules/es-abstract/2022/IteratorClose.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $TypeError = GetIntrinsic('%TypeError%');\n\nvar Call = require('./Call');\nvar CompletionRecord = require('./CompletionRecord');\nvar GetMethod = require('./GetMethod');\nvar IsCallable = require('./IsCallable');\nvar Type = require('./Type');\n\n// https://ecma-international.org/ecma-262/6.0/#sec-iteratorclose\n\nmodule.exports = function IteratorClose(iterator, completion) {\n\tif (Type(iterator) !== 'Object') {\n\t\tthrow new $TypeError('Assertion failed: Type(iterator) is not Object');\n\t}\n\tif (!IsCallable(completion) && !(completion instanceof CompletionRecord)) {\n\t\tthrow new $TypeError('Assertion failed: completion is not a thunk representing a Completion Record, nor a Completion Record instance');\n\t}\n\tvar completionThunk = completion instanceof CompletionRecord ? function () { return completion['?'](); } : completion;\n\n\tvar iteratorReturn = GetMethod(iterator, 'return');\n\n\tif (typeof iteratorReturn === 'undefined') {\n\t\treturn completionThunk();\n\t}\n\n\tvar completionRecord;\n\ttry {\n\t\tvar innerResult = Call(iteratorReturn, iterator, []);\n\t} catch (e) {\n\t\t// if we hit here, then \"e\" is the innerResult completion that needs re-throwing\n\n\t\t// if the completion is of type \"throw\", this will throw.\n\t\tcompletionThunk();\n\t\tcompletionThunk = null; // ensure it's not called twice.\n\n\t\t// if not, then return the innerResult completion\n\t\tthrow e;\n\t}\n\tcompletionRecord = completionThunk(); // if innerResult worked, then throw if the completion does\n\tcompletionThunk = null; // ensure it's not called twice.\n\n\tif (Type(innerResult) !== 'Object') {\n\t\tthrow new $TypeError('iterator .return must return an object');\n\t}\n\n\treturn completionRecord;\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAe,CAAC;AAE3C,IAAIC,UAAU,GAAGF,YAAY,CAAC,aAAa,CAAC;AAE5C,IAAIG,IAAI,GAAGF,OAAO,CAAC,QAAQ,CAAC;AAC5B,IAAIG,gBAAgB,GAAGH,OAAO,CAAC,oBAAoB,CAAC;AACpD,IAAII,SAAS,GAAGJ,OAAO,CAAC,aAAa,CAAC;AACtC,IAAIK,UAAU,GAAGL,OAAO,CAAC,cAAc,CAAC;AACxC,IAAIM,IAAI,GAAGN,OAAO,CAAC,QAAQ,CAAC;;AAE5B;;AAEAO,MAAM,CAACC,OAAO,GAAG,SAASC,aAAa,CAACC,QAAQ,EAAEC,UAAU,EAAE;EAC7D,IAAIL,IAAI,CAACI,QAAQ,CAAC,KAAK,QAAQ,EAAE;IAChC,MAAM,IAAIT,UAAU,CAAC,gDAAgD,CAAC;EACvE;EACA,IAAI,CAACI,UAAU,CAACM,UAAU,CAAC,IAAI,EAAEA,UAAU,YAAYR,gBAAgB,CAAC,EAAE;IACzE,MAAM,IAAIF,UAAU,CAAC,gHAAgH,CAAC;EACvI;EACA,IAAIW,eAAe,GAAGD,UAAU,YAAYR,gBAAgB,GAAG,YAAY;IAAE,OAAOQ,UAAU,CAAC,GAAG,CAAC,EAAE;EAAE,CAAC,GAAGA,UAAU;EAErH,IAAIE,cAAc,GAAGT,SAAS,CAACM,QAAQ,EAAE,QAAQ,CAAC;EAElD,IAAI,OAAOG,cAAc,KAAK,WAAW,EAAE;IAC1C,OAAOD,eAAe,EAAE;EACzB;EAEA,IAAIE,gBAAgB;EACpB,IAAI;IACH,IAAIC,WAAW,GAAGb,IAAI,CAACW,cAAc,EAAEH,QAAQ,EAAE,EAAE,CAAC;EACrD,CAAC,CAAC,OAAOM,CAAC,EAAE;IACX;;IAEA;IACAJ,eAAe,EAAE;IACjBA,eAAe,GAAG,IAAI,CAAC,CAAC;;IAExB;IACA,MAAMI,CAAC;EACR;EACAF,gBAAgB,GAAGF,eAAe,EAAE,CAAC,CAAC;EACtCA,eAAe,GAAG,IAAI,CAAC,CAAC;;EAExB,IAAIN,IAAI,CAACS,WAAW,CAAC,KAAK,QAAQ,EAAE;IACnC,MAAM,IAAId,UAAU,CAAC,wCAAwC,CAAC;EAC/D;EAEA,OAAOa,gBAAgB;AACxB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}