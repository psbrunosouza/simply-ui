{"ast":null,"code":"'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\nvar $SyntaxError = GetIntrinsic('%SyntaxError%');\nvar SLOT = require('internal-slot');\n\n// https://262.ecma-international.org/7.0/#sec-completion-record-specification-type\n\nvar CompletionRecord = function CompletionRecord(type, value) {\n  if (!(this instanceof CompletionRecord)) {\n    return new CompletionRecord(type, value);\n  }\n  if (type !== 'normal' && type !== 'break' && type !== 'continue' && type !== 'return' && type !== 'throw') {\n    throw new $SyntaxError('Assertion failed: `type` must be one of \"normal\", \"break\", \"continue\", \"return\", or \"throw\"');\n  }\n  SLOT.set(this, '[[Type]]', type);\n  SLOT.set(this, '[[Value]]', value);\n  // [[Target]] slot?\n};\n\nCompletionRecord.prototype.type = function Type() {\n  return SLOT.get(this, '[[Type]]');\n};\nCompletionRecord.prototype.value = function Value() {\n  return SLOT.get(this, '[[Value]]');\n};\nCompletionRecord.prototype['?'] = function ReturnIfAbrupt() {\n  var type = SLOT.get(this, '[[Type]]');\n  var value = SLOT.get(this, '[[Value]]');\n  if (type === 'normal') {\n    return value;\n  }\n  if (type === 'throw') {\n    throw value;\n  }\n  throw new $SyntaxError('Completion Record is not of type \"normal\" or \"throw\": other types not supported');\n};\nCompletionRecord.prototype['!'] = function assert() {\n  var type = SLOT.get(this, '[[Type]]');\n  if (type !== 'normal') {\n    throw new $SyntaxError('Assertion failed: Completion Record is not of type \"normal\"');\n  }\n  return SLOT.get(this, '[[Value]]');\n};\nmodule.exports = CompletionRecord;","map":{"version":3,"names":["GetIntrinsic","require","$SyntaxError","SLOT","CompletionRecord","type","value","set","prototype","Type","get","Value","ReturnIfAbrupt","assert","module","exports"],"sources":["/home/bruno/repos/libs/lib-y/node_modules/es-abstract/2022/CompletionRecord.js"],"sourcesContent":["'use strict';\n\nvar GetIntrinsic = require('get-intrinsic');\n\nvar $SyntaxError = GetIntrinsic('%SyntaxError%');\n\nvar SLOT = require('internal-slot');\n\n// https://262.ecma-international.org/7.0/#sec-completion-record-specification-type\n\nvar CompletionRecord = function CompletionRecord(type, value) {\n\tif (!(this instanceof CompletionRecord)) {\n\t\treturn new CompletionRecord(type, value);\n\t}\n\tif (type !== 'normal' && type !== 'break' && type !== 'continue' && type !== 'return' && type !== 'throw') {\n\t\tthrow new $SyntaxError('Assertion failed: `type` must be one of \"normal\", \"break\", \"continue\", \"return\", or \"throw\"');\n\t}\n\tSLOT.set(this, '[[Type]]', type);\n\tSLOT.set(this, '[[Value]]', value);\n\t// [[Target]] slot?\n};\n\nCompletionRecord.prototype.type = function Type() {\n\treturn SLOT.get(this, '[[Type]]');\n};\n\nCompletionRecord.prototype.value = function Value() {\n\treturn SLOT.get(this, '[[Value]]');\n};\n\nCompletionRecord.prototype['?'] = function ReturnIfAbrupt() {\n\tvar type = SLOT.get(this, '[[Type]]');\n\tvar value = SLOT.get(this, '[[Value]]');\n\n\tif (type === 'normal') {\n\t\treturn value;\n\t}\n\tif (type === 'throw') {\n\t\tthrow value;\n\t}\n\tthrow new $SyntaxError('Completion Record is not of type \"normal\" or \"throw\": other types not supported');\n};\n\nCompletionRecord.prototype['!'] = function assert() {\n\tvar type = SLOT.get(this, '[[Type]]');\n\n\tif (type !== 'normal') {\n\t\tthrow new $SyntaxError('Assertion failed: Completion Record is not of type \"normal\"');\n\t}\n\treturn SLOT.get(this, '[[Value]]');\n};\n\nmodule.exports = CompletionRecord;\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,YAAY,GAAGC,OAAO,CAAC,eAAe,CAAC;AAE3C,IAAIC,YAAY,GAAGF,YAAY,CAAC,eAAe,CAAC;AAEhD,IAAIG,IAAI,GAAGF,OAAO,CAAC,eAAe,CAAC;;AAEnC;;AAEA,IAAIG,gBAAgB,GAAG,SAASA,gBAAgB,CAACC,IAAI,EAAEC,KAAK,EAAE;EAC7D,IAAI,EAAE,IAAI,YAAYF,gBAAgB,CAAC,EAAE;IACxC,OAAO,IAAIA,gBAAgB,CAACC,IAAI,EAAEC,KAAK,CAAC;EACzC;EACA,IAAID,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,OAAO,IAAIA,IAAI,KAAK,UAAU,IAAIA,IAAI,KAAK,QAAQ,IAAIA,IAAI,KAAK,OAAO,EAAE;IAC1G,MAAM,IAAIH,YAAY,CAAC,6FAA6F,CAAC;EACtH;EACAC,IAAI,CAACI,GAAG,CAAC,IAAI,EAAE,UAAU,EAAEF,IAAI,CAAC;EAChCF,IAAI,CAACI,GAAG,CAAC,IAAI,EAAE,WAAW,EAAED,KAAK,CAAC;EAClC;AACD,CAAC;;AAEDF,gBAAgB,CAACI,SAAS,CAACH,IAAI,GAAG,SAASI,IAAI,GAAG;EACjD,OAAON,IAAI,CAACO,GAAG,CAAC,IAAI,EAAE,UAAU,CAAC;AAClC,CAAC;AAEDN,gBAAgB,CAACI,SAAS,CAACF,KAAK,GAAG,SAASK,KAAK,GAAG;EACnD,OAAOR,IAAI,CAACO,GAAG,CAAC,IAAI,EAAE,WAAW,CAAC;AACnC,CAAC;AAEDN,gBAAgB,CAACI,SAAS,CAAC,GAAG,CAAC,GAAG,SAASI,cAAc,GAAG;EAC3D,IAAIP,IAAI,GAAGF,IAAI,CAACO,GAAG,CAAC,IAAI,EAAE,UAAU,CAAC;EACrC,IAAIJ,KAAK,GAAGH,IAAI,CAACO,GAAG,CAAC,IAAI,EAAE,WAAW,CAAC;EAEvC,IAAIL,IAAI,KAAK,QAAQ,EAAE;IACtB,OAAOC,KAAK;EACb;EACA,IAAID,IAAI,KAAK,OAAO,EAAE;IACrB,MAAMC,KAAK;EACZ;EACA,MAAM,IAAIJ,YAAY,CAAC,iFAAiF,CAAC;AAC1G,CAAC;AAEDE,gBAAgB,CAACI,SAAS,CAAC,GAAG,CAAC,GAAG,SAASK,MAAM,GAAG;EACnD,IAAIR,IAAI,GAAGF,IAAI,CAACO,GAAG,CAAC,IAAI,EAAE,UAAU,CAAC;EAErC,IAAIL,IAAI,KAAK,QAAQ,EAAE;IACtB,MAAM,IAAIH,YAAY,CAAC,6DAA6D,CAAC;EACtF;EACA,OAAOC,IAAI,CAACO,GAAG,CAAC,IAAI,EAAE,WAAW,CAAC;AACnC,CAAC;AAEDI,MAAM,CAACC,OAAO,GAAGX,gBAAgB"},"metadata":{},"sourceType":"script","externalDependencies":[]}