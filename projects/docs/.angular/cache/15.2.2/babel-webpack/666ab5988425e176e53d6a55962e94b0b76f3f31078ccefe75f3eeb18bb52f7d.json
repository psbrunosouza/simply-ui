{"ast":null,"code":"\"use strict\";\n\nrequire(\"/home/bruno/repos/libs/lib-y/node_modules/core-js/modules/es.object.define-property.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.keydownBehavior = void 0;\nvar _utils = require(\"../../utils\");\n\n/**\n * This file should contain behavior for arrow keys as described here:\n * https://w3c.github.io/uievents-code/#key-arrowpad-section\n */\nvar keydownBehavior = [{\n  // TODO: implement for contentEditable\n  matches: function (keyDef, element) {\n    return (keyDef.key === 'ArrowLeft' || keyDef.key === 'ArrowRight') && (0, _utils.isElementType)(element, ['input', 'textarea']);\n  },\n  handle: function (keyDef, element) {\n    var _ref;\n    var _ref2 = (0, _utils.getSelectionRange)(element),\n      selectionStart = _ref2.selectionStart,\n      selectionEnd = _ref2.selectionEnd;\n    var direction = keyDef.key === 'ArrowLeft' ? -1 : 1;\n    var newPos = (_ref = selectionStart === selectionEnd ? (selectionStart != null ? selectionStart : /* istanbul ignore next */\n    0) + direction : direction < 0 ? selectionStart : selectionEnd) != null ? _ref : /* istanbul ignore next */\n    0;\n    (0, _utils.setSelectionRange)(element, newPos, newPos);\n  }\n}];\nexports.keydownBehavior = keydownBehavior;","map":{"version":3,"mappings":"AAAA,YAAY;;AAACA;AAEbC,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,eAAe,GAAG,KAAK,CAAC;AAEhC,IAAIC,MAAM,GAAGN,OAAO,CAAC,aAAa,CAAC;;AAEnC;AACA;AACA;AACA;AACA,IAAMK,eAAe,GAAG,CAAC;EACvB;EACAE,OAAO,EAAE,UAACC,MAAM,EAAEC,OAAO;IAAA,OAAK,CAACD,MAAM,CAACE,GAAG,KAAK,WAAW,IAAIF,MAAM,CAACE,GAAG,KAAK,YAAY,KAAK,CAAC,CAAC,EAAEJ,MAAM,CAACK,aAAa,EAAEF,OAAO,EAAE,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;EAAA;EACtJG,MAAM,EAAE,UAACJ,MAAM,EAAEC,OAAO,EAAK;IAC3B,IAAII,IAAI;IAER,YAGI,CAAC,CAAC,EAAEP,MAAM,CAACQ,iBAAiB,EAAEL,OAAO,CAAC;MAFxCM,cAAc,SAAdA,cAAc;MACdC,YAAY,SAAZA,YAAY;IAEd,IAAMC,SAAS,GAAGT,MAAM,CAACE,GAAG,KAAK,WAAW,GAAG,CAAC,CAAC,GAAG,CAAC;IACrD,IAAMQ,MAAM,GAAG,CAACL,IAAI,GAAGE,cAAc,KAAKC,YAAY,GAAG,CAACD,cAAc,IAAI,IAAI,GAAGA,cAAc,GACjG;IACA,CAAC,IAAIE,SAAS,GAAGA,SAAS,GAAG,CAAC,GAAGF,cAAc,GAAGC,YAAY,KAAK,IAAI,GAAGH,IAAI,GAC9E;IACA,CAAC;IACD,CAAC,CAAC,EAAEP,MAAM,CAACa,iBAAiB,EAAEV,OAAO,EAAES,MAAM,EAAEA,MAAM,CAAC;EACxD;AACF,CAAC,CAAC;AACFf,OAAO,CAACE,eAAe,GAAGA,eAAe","names":["require","Object","defineProperty","exports","value","keydownBehavior","_utils","matches","keyDef","element","key","isElementType","handle","_ref","getSelectionRange","selectionStart","selectionEnd","direction","newPos","setSelectionRange"],"sources":["/home/bruno/repos/libs/lib-y/node_modules/@testing-library/user-event/dist/keyboard/plugins/arrow.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.keydownBehavior = void 0;\n\nvar _utils = require(\"../../utils\");\n\n/**\n * This file should contain behavior for arrow keys as described here:\n * https://w3c.github.io/uievents-code/#key-arrowpad-section\n */\nconst keydownBehavior = [{\n  // TODO: implement for contentEditable\n  matches: (keyDef, element) => (keyDef.key === 'ArrowLeft' || keyDef.key === 'ArrowRight') && (0, _utils.isElementType)(element, ['input', 'textarea']),\n  handle: (keyDef, element) => {\n    var _ref;\n\n    const {\n      selectionStart,\n      selectionEnd\n    } = (0, _utils.getSelectionRange)(element);\n    const direction = keyDef.key === 'ArrowLeft' ? -1 : 1;\n    const newPos = (_ref = selectionStart === selectionEnd ? (selectionStart != null ? selectionStart :\n    /* istanbul ignore next */\n    0) + direction : direction < 0 ? selectionStart : selectionEnd) != null ? _ref :\n    /* istanbul ignore next */\n    0;\n    (0, _utils.setSelectionRange)(element, newPos, newPos);\n  }\n}];\nexports.keydownBehavior = keydownBehavior;"]},"metadata":{},"sourceType":"script","externalDependencies":[]}