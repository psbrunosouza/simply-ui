{"ast":null,"code":"\"use strict\";\n\nvar _asyncToGenerator = require(\"/home/bruno/repos/libs/lib-y/node_modules/@babel/runtime/helpers/asyncToGenerator.js\").default;\nrequire(\"/home/bruno/repos/libs/lib-y/node_modules/core-js/modules/es.object.define-property.js\");\nrequire(\"/home/bruno/repos/libs/lib-y/node_modules/core-js/modules/es.promise.js\");\nrequire(\"/home/bruno/repos/libs/lib-y/node_modules/core-js/modules/es.object.to-string.js\");\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.typeImplementation = typeImplementation;\nvar _utils = require(\"../utils\");\nvar _click = require(\"../click\");\nvar _keyboard = require(\"../keyboard\");\nfunction typeImplementation(_x, _x2, _x3) {\n  return _typeImplementation.apply(this, arguments);\n}\nfunction _typeImplementation() {\n  _typeImplementation = _asyncToGenerator(function* (element, text, _ref) {\n    var delay = _ref.delay,\n      _ref$skipClick = _ref.skipClick,\n      skipClick = _ref$skipClick === void 0 ? false : _ref$skipClick,\n      _ref$skipAutoClose = _ref.skipAutoClose,\n      skipAutoClose = _ref$skipAutoClose === void 0 ? false : _ref$skipAutoClose,\n      _ref$initialSelection = _ref.initialSelectionStart,\n      initialSelectionStart = _ref$initialSelection === void 0 ? undefined : _ref$initialSelection,\n      _ref$initialSelection2 = _ref.initialSelectionEnd,\n      initialSelectionEnd = _ref$initialSelection2 === void 0 ? undefined : _ref$initialSelection2;\n    // TODO: properly type guard\n    // we use this workaround for now to prevent changing behavior\n    if (element.disabled) return;\n    if (!skipClick) (0, _click.click)(element); // The focused element could change between each event, so get the currently active element each time\n\n    var currentElement = function () {\n      return (0, _utils.getActiveElement)(element.ownerDocument);\n    }; // by default, a new element has its selection start and end at 0\n    // but most of the time when people call \"type\", they expect it to type\n    // at the end of the current input value. So, if the selection start\n    // and end are both the default of 0, then we'll go ahead and change\n    // them to the length of the current value.\n    // the only time it would make sense to pass the initialSelectionStart or\n    // initialSelectionEnd is if you have an input with a value and want to\n    // explicitly start typing with the cursor at 0. Not super common.\n\n    var value = (0, _utils.getValue)(currentElement());\n    var _ref2 = (0, _utils.getSelectionRange)(element),\n      selectionStart = _ref2.selectionStart,\n      selectionEnd = _ref2.selectionEnd;\n    if (value != null && (selectionStart === null || selectionStart === 0) && (selectionEnd === null || selectionEnd === 0)) {\n      (0, _utils.setSelectionRange)(currentElement(), initialSelectionStart != null ? initialSelectionStart : value.length, initialSelectionEnd != null ? initialSelectionEnd : value.length);\n    }\n    var _ref3 = (0, _keyboard.keyboardImplementationWrapper)(text, {\n        delay: delay,\n        document: element.ownerDocument\n      }),\n      promise = _ref3.promise,\n      releaseAllKeys = _ref3.releaseAllKeys;\n    if (delay > 0) {\n      yield promise;\n    }\n    if (!skipAutoClose) {\n      releaseAllKeys();\n    } // eslint-disable-next-line consistent-return -- we need to return the internal Promise so that it is catchable if we don't await\n\n    return promise;\n  });\n  return _typeImplementation.apply(this, arguments);\n}","map":{"version":3,"mappings":"AAAA,YAAY;;AAAA;AAACA;AAAAA;AAAAA;AAEbC,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAC3CC,KAAK,EAAE;AACT,CAAC,CAAC;AACFD,OAAO,CAACE,kBAAkB,GAAGA,kBAAkB;AAE/C,IAAIC,MAAM,GAAGN,OAAO,CAAC,UAAU,CAAC;AAEhC,IAAIO,MAAM,GAAGP,OAAO,CAAC,UAAU,CAAC;AAEhC,IAAIQ,SAAS,GAAGR,OAAO,CAAC,aAAa,CAAC;AAAA,SAEvBK,kBAAkBA;EAAAA;AAAAA;AAAAA;EAAAA,wCAAjC,WAAkCI,OAAO,EAAEC,IAAI,QAM5C;IAAA,IALDC,KAAK,QAALA,KAAK;MAAAC,sBACLC,SAAS;MAATA,SAAS,+BAAG,KAAK;MAAAC,0BACjBC,aAAa;MAAbA,aAAa,mCAAG,KAAK;MAAAC,6BACrBC,qBAAqB;MAArBA,qBAAqB,sCAAGC,SAAS;MAAAC,8BACjCC,mBAAmB;MAAnBA,mBAAmB,uCAAGF,SAAS;IAE/B;IACA;IACA,IAAIT,OAAO,CAACY,QAAQ,EAAE;IACtB,IAAI,CAACR,SAAS,EAAE,CAAC,CAAC,EAAEN,MAAM,CAACe,KAAK,EAAEb,OAAO,CAAC,CAAC,CAAC;;IAE5C,IAAMc,cAAc,GAAG;MAAA,OAAM,CAAC,CAAC,EAAEjB,MAAM,CAACkB,gBAAgB,EAAEf,OAAO,CAACgB,aAAa,CAAC;IAAA,EAAC,CAAC;IAClF;IACA;IACA;IACA;IACA;IACA;IACA;;IAGA,IAAMrB,KAAK,GAAG,CAAC,CAAC,EAAEE,MAAM,CAACoB,QAAQ,EAAEH,cAAc,EAAE,CAAC;IACpD,YAGI,CAAC,CAAC,EAAEjB,MAAM,CAACqB,iBAAiB,EAAElB,OAAO,CAAC;MAFxCmB,cAAc,SAAdA,cAAc;MACdC,YAAY,SAAZA,YAAY;IAGd,IAAIzB,KAAK,IAAI,IAAI,KAAKwB,cAAc,KAAK,IAAI,IAAIA,cAAc,KAAK,CAAC,CAAC,KAAKC,YAAY,KAAK,IAAI,IAAIA,YAAY,KAAK,CAAC,CAAC,EAAE;MACvH,CAAC,CAAC,EAAEvB,MAAM,CAACwB,iBAAiB,EAAEP,cAAc,EAAE,EAAEN,qBAAqB,IAAI,IAAI,GAAGA,qBAAqB,GAAGb,KAAK,CAAC2B,MAAM,EAAEX,mBAAmB,IAAI,IAAI,GAAGA,mBAAmB,GAAGhB,KAAK,CAAC2B,MAAM,CAAC;IACzL;IAEA,YAGI,CAAC,CAAC,EAAEvB,SAAS,CAACwB,6BAA6B,EAAEtB,IAAI,EAAE;QACrDC,KAAK,EAALA,KAAK;QACLsB,QAAQ,EAAExB,OAAO,CAACgB;MACpB,CAAC,CAAC;MALAS,OAAO,SAAPA,OAAO;MACPC,cAAc,SAAdA,cAAc;IAMhB,IAAIxB,KAAK,GAAG,CAAC,EAAE;MACb,MAAMuB,OAAO;IACf;IAEA,IAAI,CAACnB,aAAa,EAAE;MAClBoB,cAAc,EAAE;IAClB,CAAC,CAAC;;IAGF,OAAOD,OAAO;EAChB;EAAA;AAAA","names":["require","Object","defineProperty","exports","value","typeImplementation","_utils","_click","_keyboard","element","text","delay","_ref$skipClick","skipClick","_ref$skipAutoClose","skipAutoClose","_ref$initialSelection","initialSelectionStart","undefined","_ref$initialSelection2","initialSelectionEnd","disabled","click","currentElement","getActiveElement","ownerDocument","getValue","getSelectionRange","selectionStart","selectionEnd","setSelectionRange","length","keyboardImplementationWrapper","document","promise","releaseAllKeys"],"sources":["/home/bruno/repos/libs/lib-y/node_modules/@testing-library/user-event/dist/type/typeImplementation.js"],"sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.typeImplementation = typeImplementation;\n\nvar _utils = require(\"../utils\");\n\nvar _click = require(\"../click\");\n\nvar _keyboard = require(\"../keyboard\");\n\nasync function typeImplementation(element, text, {\n  delay,\n  skipClick = false,\n  skipAutoClose = false,\n  initialSelectionStart = undefined,\n  initialSelectionEnd = undefined\n}) {\n  // TODO: properly type guard\n  // we use this workaround for now to prevent changing behavior\n  if (element.disabled) return;\n  if (!skipClick) (0, _click.click)(element); // The focused element could change between each event, so get the currently active element each time\n\n  const currentElement = () => (0, _utils.getActiveElement)(element.ownerDocument); // by default, a new element has its selection start and end at 0\n  // but most of the time when people call \"type\", they expect it to type\n  // at the end of the current input value. So, if the selection start\n  // and end are both the default of 0, then we'll go ahead and change\n  // them to the length of the current value.\n  // the only time it would make sense to pass the initialSelectionStart or\n  // initialSelectionEnd is if you have an input with a value and want to\n  // explicitly start typing with the cursor at 0. Not super common.\n\n\n  const value = (0, _utils.getValue)(currentElement());\n  const {\n    selectionStart,\n    selectionEnd\n  } = (0, _utils.getSelectionRange)(element);\n\n  if (value != null && (selectionStart === null || selectionStart === 0) && (selectionEnd === null || selectionEnd === 0)) {\n    (0, _utils.setSelectionRange)(currentElement(), initialSelectionStart != null ? initialSelectionStart : value.length, initialSelectionEnd != null ? initialSelectionEnd : value.length);\n  }\n\n  const {\n    promise,\n    releaseAllKeys\n  } = (0, _keyboard.keyboardImplementationWrapper)(text, {\n    delay,\n    document: element.ownerDocument\n  });\n\n  if (delay > 0) {\n    await promise;\n  }\n\n  if (!skipAutoClose) {\n    releaseAllKeys();\n  } // eslint-disable-next-line consistent-return -- we need to return the internal Promise so that it is catchable if we don't await\n\n\n  return promise;\n}"]},"metadata":{},"sourceType":"script","externalDependencies":[]}